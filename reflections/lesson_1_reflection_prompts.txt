How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    it is much better than comparing file one by one, but FC command is no good enough for multiple changes, text editor like notepad ++ (and probably sublime) is more efficient

    
How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    There is no need to remind, rewrite code, or keep many files with various of names and remembering what was where. It is also easy to rollback to previous version if new changes made fome side effects or go back few versions back if implementation went into wrong direction. Or custommer decided to  get back to previous requirement.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    In auto commit we dont have to worry so much when we forget to make a commit or soemthing is going wrong (e.g. system crash) because we can recover our work as much as auto commit frequency allows. Bad thing in such solution is that we have a lot of tiny commits and it is hard to find the one we are looking for.
    
    With Manual commits we are more vulneralble to unexpected events and data loss related to those and we have to remember about reasonable commiting. Good thing is that we have option to comment and name every commit and if we have good practice in that we can clearly distinguish every commit and find changes that we are interested in.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Git is considering files as a whole project which consist of multiple files more or less related to each other, while other systems like Google Docs are single file-oriented (we don't have much interactive references between .doc files).

How can you use the commands git log and git diff to view the history of files?

    In the command line we can type 
    git log - what gives us the history of commits with hashes and messages
        !!!!newest commits are on the top of the list
    git diff older_commit newer_commit(that_we_want_toCheck)
    
    * moving between folders is different than in windows so we use
        cd c/GitHub
        
        instead of
        
        cd c:\GitHub
    

How might using version control make you more confident to make changes that
could break something?

    We can easly track the commits and "switch"(make checkout) betweeen them to find the commit in which the bug was made.
    git log - check commits list and assume (or remember) with which commit there was no issue
    git checkout <commit hash(ID)> - "switch" - make  assumed commit current (temporary) - to the assumed commit and check empirically whether bug occurrs or not
    git diff <issued commit ID> <prevoius commit ID> 

Now that you have your workspace set up, what do you want to try using Git for?

    I want to use Git to learn the git and use it in future work and for learning process for programming etc.

    
!!!!!!!!!!!!!!!!!!!GIT ISSUES!!!!!!!!!!!!!!!!!!!!!
http://stackoverflow.com/questions/7704480/why-does-git-commit-not-save-my-changes
http://stackoverflow.com/questions/10721624/github-changes-not-staged-for-commit
